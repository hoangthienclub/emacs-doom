#+title: 2022  Doom Emacs Configuration
#+subtitle: The Methods, Management, and Menagerie of Madness
#+author: Thien Tran
#+auto_tangle: t
#+macro: timezone (eval (substring (shell-command-to-string "date +%Z") 0 -1))
#+startup: fold
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent

* Function declaration
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:

** quick-find

#+begin_src emacs-lisp
;;;###autoload
(defun dired-timesort (filename &optional wildcards)
  (let ((dired-listing-switches "-lhat"))
    (dired filename wildcards)))

;;;###autoload
(defmacro quick-find (key file &optional path find-args)
  `(bind-key
    ,key
    (cond
     ((stringp ,find-args)
      '(lambda (&optional arg)
         (interactive)
         (find-dired (expand-file-name ,file ,path) ,find-args)))
     ((and
       ;; (not (tramp-tramp-file-p (expand-file-name ,file ,path)))
       (or (file-directory-p (expand-file-name ,file ,path))
           (not (file-exists-p (expand-file-name ,file ,path)))))
      '(lambda (&optional arg)
         (interactive)
         (dired-timesort (expand-file-name ,file ,path))))
     (t
      '(lambda (&optional arg)
         (interactive)
         (find-file (expand-file-name ,file ,path)))))
    ))
#+end_src


* Basic Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:
#+begin_src emacs-lisp
(delete-selection-mode t)
(setq
 ;; private information
 user-full-name "Thien Tran"
 user-mail-address "thien301194@gmail.com"

 ;; lsp
 lsp-ui-sideline-enable nil
 lsp-ui-doc-enable nil
 lsp-enable-symbol-highlighting nil
 +lsp-prompt-to-install-server 'quiet

(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(add-hook 'org-mode-hook 'turn-on-auto-fill)

(setq emacs-everywhere-frame-name-format "emacs-anywhere")
(remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)

;; Semi-center it over the target window, rather than at the cursor position
;; (which could be anywhere).
(defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
  :override #'emacs-everywhere-set-frame-position
  (cl-destructuring-bind (x y width height)
      (emacs-everywhere-window-geometry window-info)
    (set-frame-position frame
                        (+ x (/ width 2) (- (/ width 2)))
                        (+ y (/ height 2)))))
#+end_src

* Package Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:

** prettier
#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-prettier-mode)
(setenv "NODE_PATH" "/usr/local/lib/node_modules")
#+end_src

** lsp
#+begin_src emacs-lisp
(use-package! lsp-mode
  :commands lsp
  :config
  (setq lsp-idle-delay 0.2
        lsp-enable-file-watchers nil
        lsp-prefer-capf t
        lsp-eldoc-render-all t
        )
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)

  (add-to-list 'lsp-language-id-configuration '(js-jsx-mode . "javascriptreact"))
  )

(use-package! lsp-ui
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-headerline-breadcrumb-enable t ;
        lsp-lens-enable t                  ;
        )
  :bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references)
         ([remap xref-pop-marker-stack] . lsp-ui-peek-jump-backward)
         )
  :custom
  (lsp-ui-doc-position 'bottom)
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil)
  )

;; lsp format use prettier
(add-hook! 'after-init-hook
           (progn
  (setq-hook! 'typescript-mode-hook +format-with :nil)
  (add-hook! 'typescript-mode-hook 'prettier-mode)
  (setq-hook! 'rjsx-mode-hook +format-with :nil)
  (add-hook! 'rjsx-mode-hook 'prettier-mode)
  (setq-hook! 'js2-mode-hook +format-with :nil)
  (add-hook! 'js2-mode-hook 'prettier-mode)
  (setq-hook! 'typescript-tsx-mode-hook +format-with :nil)
  (add-hook! 'typescript-tsx-mode-hook 'prettier-mode)
  ))

(use-package! lsp-volar)
#+end_src

** =company=
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 2)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src

** =engine-mode=
#+begin_src emacs-lisp
   (use-package engine-mode
     :config
     (engine/set-keymap-prefix (kbd "C-c s"))
     (setq browse-url-browser-function 'browse-url-default-macosx-browser
           engine/browser-function 'browse-url-default-macosx-browser
           ;; browse-url-generic-program "google-chrome"
           )
   
     (defengine stack-overflow
       "https://stackoverflow.com/search?q=%s"
       :keybinding "o")

     (defengine translate
       "https://translate.google.com/?sl=en&tl=vi&text=%s&op=translate"
       :keybinding "t")

     (defengine youtube
       "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
       :keybinding "y")

     (defengine google
       "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
       :keybinding "g")

     (engine-mode 1))
     #+end_src

** =flycheck=
#+begin_src emacs-lisp
(use-package! flycheck
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-hook 'flycheck-mode-hook 'dqv/use-eslint-from-node-modules))
#+end_src

** js-doc
#+begin_src emacs-lisp
(use-package! js-doc
  :bind (:map js2-mode-map
         ("@" . js-doc-insert-tag))
  :config
  (setq js-doc-mail-address user-mail-address
       js-doc-author (format "%s<%s>" user-full-name js-doc-mail-address)
       js-doc-url user-blog-url
       js-doc-license "MIT"))
#+end_src

** autoinsert
#+begin_src emacs-lisp
(setq auto-insert 'other
      auto-insert-query nil
      auto-insert-directory (concat doom-private-dir "auto-insert-templates")
      auto-insert-alist '(
                          ("\\.\\([Hh]\\|hh\\|hpp\\)\\'" . "template.h")
                          ("\\.\\(jsx?\\|tsx?\\)\\'" . "my.js")
                          ("\\.\\(vue\\)\\'" . "my.vue")
                          ))
(add-hook 'find-file-hook #'auto-insert)
#+end_src

* Development Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:
** Front-End
#+begin_src emacs-lisp
(setq
    css-indent-offset 2
    js2-basic-offset 2
    js-switch-indent-offset 2
    js-indent-level 2
    js-jsx-indent-level 2
    js2-mode-show-parse-errors nil
    js2-mode-show-strict-warnings nil
    web-mode-attr-indent-offset 2
    web-mode-code-indent-offset 2
    web-mode-css-indent-offset 2
    web-mode-markup-indent-offset 2
    web-mode-enable-current-element-highlight t
    web-mode-enable-current-column-highlight t)

#+end_src

~find-function-at-point~ bindings
#+begin_src emacs-lisp
(after! prog-mode
  (map! :map prog-mode-map "C-h C-f" #'find-function-at-point)
  (map! :map prog-mode-map
        :localleader
        :desc "Find function at point"
        "g p" #'find-function-at-point))
#+end_src

** Javascript
*** Rjsx
#+begin_src emacs-lisp
(use-package! js-mode
  :ensure t
  :mode "\\.js\\'")
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))

#+end_src

*** Web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.js\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

*** Tide
#+begin_src emacs-lisp
(defun setup-tide-mode()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (tide-hl-identifier-mode +1)
  (company-mode +1))

(use-package! tide
  :ensure t
  :after (web-mode)
  :hook (web-mode . prettier-js-mode))
#+end_src

** Typescript
#+begin_src emacs-lisp

(use-package! typescript-mode
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "typescript-tsx")
  (add-to-list 'auto-mode-alist (cons (rx ".tsx" string-end) #'typescript-tsx-mode))
  )

(add-hook! typescript-tsx-mode 'lsp!)

(use-package! tree-sitter
  :hook (prog-mode . turn-on-tree-sitter-mode)
  :hook (tree-sitter-after-on . tree-sitter-hl-mode)
  :config
  (require 'tree-sitter-langs)

  (tree-sitter-require 'tsx)
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-tsx-mode . tsx))

  ;; This makes every node a link to a section of code
  (setq tree-sitter-debug-jump-buttons t
        ;; and this highlights the entire sub tree in your code
        tree-sitter-debug-highlight-jump-region t))
#+end_src

** Commenting
#+begin_src emacs-lisp
(use-package! evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rust
#+begin_src emacs-lisp

(use-package! flycheck :ensure)
  (use-package! rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
#+end_src

** Debugger
*** dap-Mode
#+begin_src emacs-lisp
;; Enabling only some features
(setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src

*** Javascript
#+begin_src emacs-lisp
(require 'dap-chrome)
#+end_src

*** Rust
#+begin_src emacs-lisp
(require 'dap-gdb-lldb)
(dap-register-debug-template "Rust::GDB Run Configuration"
                             (list :type "gdb"
                                   :request "launch"
                                   :name "GDB::Run"
                           :gdbpath "rust-gdb"
                                   :target nil
                                   :cwd nil))
#+end_src

* Funny
[[https://github.com/thinkhuman/writingwithemacs][thinkhuman/writingwithemacs: Tips, Examples, and Resources for Writing with Emacs]]
search keyword in all typed files and replace it with ~wgrep~

1. ~rgrep~ search in all files
2. ~wgrep-change-to-wgrep-mode~ enable wgrep mode
3. ~vr/replace, C-c r [rq]~
4. ~wgrep-finish-edit, C-c C-c~ write to all files
1